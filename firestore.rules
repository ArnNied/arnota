rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function incomingData() {
      return request.resource.data;
    }

    function existingData() {
      return resource.data;
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner() {
      // Reject if the user is not authenticated
      // And ensure that the owner field is the authenticated user
      return isAuthenticated() && request.auth.uid == existingData().owner;
    }

    function noteFields() {
      return [
        'owner',
        'title',
        'body',
        'plainBody',
        'category',
        'visibility',
        'tags',
        'favoritedBy',
        'createdAt',
        'lastModified'
      ];
    }

    function isValidNoteStructure(data) {
      return data.keys().hasAll(noteFields())
        && (data.owner is string)
        && (data.title is string && data.title.size() > 0)
        && (data.body is string && data.body.size() > 0)
        && (data.plainBody is string)
        && (data.category is string)
        && (data.visibility is string
          && (data.visibility == 'PUBLIC'
            || data.visibility == 'LIMITED'
            || data.visibility == 'PRIVATE'
          )
        )
        && (data.tags is list)
        && (data.favoritedBy is list)
        && (data.createdAt is timestamp)
        && (data.lastModified is timestamp)
    }

    function isValidTags(tags) {
      // Prevent empty tags
      return !([''] in tags)

          // Prevent duplicate tags
          && tags.toSet().size() == tags.size()
    }

    function noteCreate(data) {
      return isValidNoteStructure(data)

            // Ensure that the note is not favorited by anyone
            // On creation
            && data.favoritedBy.size() == 0

            // Ensure that the owner field is the authenticated user
            // This is to prevent the user from creating a note with
            // Another user's uid
            && data.owner == request.auth.uid

            && isValidTags(data.tags)
    }

    function noteUpdate(data) {
      return isValidNoteStructure(data)
            && isOwner()

            // Ensure it is not a favorite action
            && !actionNoteFavorite(data)

            // Ensure that it doesnn't modify unintended fields
            && data.diff(existingData()).affectedKeys().hasOnly([
              'title',
              'body',
              'plainBody',
              'category',
              'visibility',
              'tags',
              'lastModified'
              ])

            && isValidTags(data.tags)

    }

    function actionNoteFavorite(data) {
      return data.diff(existingData()).affectedKeys().hasAll(['favoritedBy'])
        && (
          // Favoriting
          (
            // Final list size must be increased by 1
            data.favoritedBy.size() == existingData().favoritedBy.size() + 1

            // User uid must not be on the initial list
            && !(request.auth.uid in existingData().favoritedBy)

            // User uid must be on the final list
            // Plus the previous two condition, this is to make it so that
            // Only the user can add themselves to the list
            && request.auth.uid in data.favoritedBy

            // owner uid must not be on the final list
            // Prevent the owner from favoriting his own note
            && !(existingData().owner in data.favoritedBy)
          )
        ||
          // Unfavoriting
          (
          // Final list size must be decreased by 1
          data.favoritedBy.size() == existingData().favoritedBy.size() - 1

          // User uid must be on the initial list
          && request.auth.uid in existingData().favoritedBy

          // User uid must not be on the final list
          // Plus the previous two condition, this is to make it so that
          // Only the user can remove themselves from the list
          && !(request.auth.uid in data.favoritedBy)
          )
        )
    }

    match /notes/{noteId} {
      allow list: if isOwner()
                || existingData().visibility == 'PUBLIC'
                || (
                  existingData().visibility != 'PRIVATE'
                  && request.auth.uid in existingData().favoritedBy
                )

      allow get: if isOwner() || existingData().visibility != 'PRIVATE'

      allow create: if isAuthenticated()
                  && noteCreate(incomingData())

      allow update: if isValidNoteStructure(incomingData())
                  && (
                    noteUpdate(incomingData())
                    || actionNoteFavorite(incomingData())
                    )

      allow delete: if isOwner();
    }

    match /users/{userUid} {
      allow read: if true;
      allow write: if isAuthenticated() && request.auth.uid == userUid;
    }
  }
}
